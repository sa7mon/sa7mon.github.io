name: Link Issue Created or Updated

# At minimum, the issue body should be parsed any time an issue is opened,
# edited, or reopened. This ensures that the most up to date information is
# validated.
on:
  issues:
    types:
      - opened
      - edited
      - reopened

jobs:
  # Different request types may have different inputs. For example, a new
  # repository request may have different inputs than a repository transfer
  # request. You can create multiple jobs to parse different types of requests
  # in the same workflow. Labels can be used to control which jobs run for
  # which types of requests.
  new-link:
    name: New Link
    runs-on: ubuntu-latest

    # Assign labels for different types of requests, and use those labels to
    # trigger different workflows, jobs, and steps.
    if: contains(github.event.issue.labels.*.name, 'link')

    # Initially, this workflow only needs permissions to read issues and
    # contents. This will be expanded later as we build additional
    # functionality.
    permissions:
      contents: read
      issues: write
      
    steps:
      # Get the repository contents. This lets the workflow reference files in
      # the repository such as the issue form template.
      - name: Checkout
        id: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Parse Issue
        id: parse
        uses: issue-ops/parser@76d5aa095754de1493cbe41934484c4287e16350 # v4.2.0
        with:
          body: ${{ github.event.issue.body }}
          issue-form-template: new-link.yml

      - name: Output the Parsed Issue
        id: output
        run: echo ${{ steps.parse.outputs.json }}
      
      - name: Make slug
        id: make-slug
        run: |
          export slug=$(echo "${{ steps.parse.outputs.parsed_title }}" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g' | sed 's/[^a-z0-9-]//g')
          echo "FILE_SLUG=$(date +"%Y-%m-%d")_$slug_${{ steps.parse.outputs.parsed_pub_date }}" >> "${GITHUB_OUTPUT}"

      - name: Read .env
        id: hugo-version
        run: |
          . ./.env
          echo "HUGO_VERSION=${HUGO_VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '${{ steps.hugo-version.outputs.HUGO_VERSION }}'
          extended: true
      
      - name: Create File
        run: |
          hugo new links/${{ steps.make-slug.outputs.file_slug }}.md
          export FILE=content/links/${{ steps.make-slug.outputs.file_slug }}.md
          sed -i -E 's/title: ".+"$/title: "${{ steps.parse.outputs.parsed_title }}"/' $FILE
          export SITE=$(echo ${{ steps.parse.outputs.parsed_url }}| awk -F/ '{print $3}')
          sed -i -E "s/site: .+$/site: $SITE/" $FILE
          sed -i -E "s/link_tags: .+$/link_tags: [${{ steps.parse.outputs.parsed_tags }}]/" $FILE
          sed -i -E "s/formats: .+$/formats: ${{ steps.parse.outputs.parsed_format }}/" $FILE
          cat $FILE
        
      # - name: Post Comment on Issue
      #   uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4
      #   with:
      #     issue-number: ${{ github.event.issue.number }}
      #     body: |
      #       - Title: ${{ steps.parse.outputs.parsed_title }}
      #       - URL: 
      #       - Date: 
      #       - Tags:
      #       - Format: 
      #       - Description:
